# code.py — Météo par ville (ESP32-S3 Matrix 8×8, CircuitPython)
# Affiche d’abord la TEMPÉRATURE (chiffre par chiffre), puis un SYMBOLE coloré
# selon la météo (soleil/pluie/orage/nuage). Rafraîchit périodiquement.
#
# Pour débuter :
# 1) Mettez vos codes Wi-Fi ci-dessous.
# 2) Changez VILLE = "Paris" en "Lyon", "Marseille", "Toulouse", etc.
#
# Bibliothèques à copier dans /lib :
#   - adafruit_requests
#   - adafruit_pixel_framebuf

import time, ssl
import wifi, socketpool, adafruit_requests
import board, neopixel
from adafruit_pixel_framebuf import PixelFramebuffer, VERTICAL

# ───────── Réglages Wi-Fi & ville ─────────
WIFI_SSID = "VOTRE_SSID"
WIFI_PASSWORD = "VOTRE_MOT_DE_PASSE"
VILLE = "Paris"                      # nom libre : "Paris", "Nice", "Bordeaux", etc.

# ───────── Matrice 8×8 ─────────
W = H = 8
BRIGHTNESS = 0.10
SWAP_RG = False  # passez True si rouge/vert inversés

pixels = neopixel.NeoPixel(
    board.NEOPIXEL, W*H,
    brightness=BRIGHTNESS, auto_write=False,
    pixel_order=neopixel.GRB  # mettre RGB si nécessaire
)
fb = PixelFramebuffer(
    pixels, W, H,
    orientation=VERTICAL, alternating=False,
    reverse_x=False, reverse_y=True   # origine haut-gauche
)

def col(c):
    if not SWAP_RG: return c
    r, g, b = (c>>16)&0xFF, (c>>8)&0xFF, c&0xFF
    return (g<<16)|(r<<8)|b

NOIR   = col(0x000000)
BLANC  = col(0xFFFFFF)
JAUNE  = col(0xFFD000)
BLEU   = col(0x2090FF)
GRIS1  = col(0x505050)
GRIS2  = col(0x707070)

# ───────── Petites aides d’affichage ─────────
def clear(): fb.fill(NOIR); fb.display()
def center_char(ch, color=BLANC, hold=0.9):
    """Affiche un caractère 8×8 (police intégrée) puis attend un peu."""
    fb.fill(NOIR); fb.text(ch, 0, 0, color); fb.display(); time.sleep(hold)

def show_temperature(value_c):
    """Affiche la température en °C, chiffre par chiffre, puis 'C'."""
    s = str(int(round(value_c)))
    for ch in s:
        center_char(ch, BLANC, 0.9)
        fb.fill(NOIR); fb.display(); time.sleep(0.12)
    center_char("C", BLANC, 0.8)

# ───────── Icônes météo simples ─────────
def icon_sun(t=2.5, fps=12):
    """Cercle jaune pulsé (soleil)."""
    steps = int(t*fps)
    for i in range(steps):
        fb.fill(NOIR)
        r = 2 + ((i//3) % 2)     # rayon 2↔3
        cx, cy = 3, 3
        for y in range(H):
            for x in range(W):
                dx, dy = x-cx, y-cy
                d2 = dx*dx + dy*dy
                if (r*r-1) <= d2 <= (r*r+1):
                    fb.pixel(x, y, JAUNE)
        fb.display(); time.sleep(1.0/fps)

def icon_rain(t=2.5, fps=14):
    """Vagues bleues (pluie)."""
    steps = int(t*fps)
    for k in range(steps):
        fb.fill(NOIR)
        ph = k % W
        for y in range(H):
            for x in range(W):
                v = ((x+ph) + (y&1)) % 4
                if v == 0 or (y >= 5 and v <= 1):
                    fb.pixel(x, y, BLEU)
        fb.display(); time.sleep(1.0/fps)

def icon_storm(t=2.5, fps=12):
    """Nuage gris mobile + petits éclairs (orage)."""
    steps = int(t*fps)
    for i in range(steps):
        fb.fill(NOIR)
        off = (i//2) % 3
        for y in range(2, 5):
            for x in range(1+off, 7+off):
                if 0 <= x < W:
                    fb.pixel(x, y, GRIS1 if ((x+y)&1) else GRIS2)
        if i % 10 == 0:
            fb.pixel(4, 1, BLANC); fb.pixel(4, 2, BLANC); fb.pixel(5, 3, BLANC)
        fb.display(); time.sleep(1.0/fps)

def icon_cloud(t=2.0):
    """Nuage statique (météo par défaut)."""
    fb.fill(NOIR)
    for y in range(2, 5):
        for x in range(1, 7):
            fb.pixel(x, y, GRIS2)
    fb.display(); time.sleep(t)

def show_icon_by_code(code):
    """Mappe le code météo Open-Meteo vers une icône."""
    if code in (0, 1):                     # ciel clair / principalement clair
        icon_sun()
    elif (51 <= code <= 67) or (80 <= code <= 82):  # bruine/pluie/averses
        icon_rain()
    elif code in (95, 96, 99):             # orage
        icon_storm()
    else:
        icon_cloud()

# ───────── Réseau : géocodage + météo (Open-Meteo) ─────────
def url_quote(name):
    return name.replace(" ", "%20")

def geocode_city(session, name):
    """Retourne (lat, lon, label) via l’API de géocodage Open-Meteo, sinon None."""
    url = "https://geocoding-api.open-meteo.com/v1/search?name=%s&count=1&language=fr&format=json" % url_quote(name)
    try:
        r = session.get(url, timeout=10); j = r.json(); r.close()
        res = j.get("results") or []
        if not res: return None
        it = res[0]
        return float(it["latitude"]), float(it["longitude"]), it.get("name","?")
    except Exception as e:
        print("Géocodage échec:", e)
        return None

def fetch_weather(session, lat, lon):
    """Retourne (temp_c, weather_code) ou (None, None)."""
    url = (
        "https://api.open-meteo.com/v1/forecast"
        f"?latitude={lat}&longitude={lon}"
        "&current=temperature_2m,weather_code"
        "&timezone=auto"
    )
    try:
        r = session.get(url, timeout=10); j = r.json(); r.close()
        cur = j.get("current", {})
        return cur.get("temperature_2m"), cur.get("weather_code")
    except Exception as e:
        print("Météo échec:", e)
        return None, None

# ───────── Programme principal ─────────
def main():
    # Connexion Wi-Fi
    print("Connexion Wi-Fi…")
    wifi.radio.connect(WIFI_SSID, WIFI_PASSWORD)
    print("IP:", wifi.radio.ipv4_address)

    pool = socketpool.SocketPool(wifi.radio)
    req = adafruit_requests.Session(pool, ssl.create_default_context())

    # Blink de démarrage
    fb.fill(col(0x202020)); fb.display(); time.sleep(0.2)
    clear()

    # Géocodage de la ville
    geo = geocode_city(req, VILLE)
    if not geo:
        print("Géocodage introuvable, défaut Paris.")
        lat, lon = 48.8566, 2.3522
    else:
        lat, lon, label = geo
        print("Ville:", label, "→", lat, lon)

    # Boucle : température → symbole → pause → rafraîchit régulièrement
    REFRESH_S = 5*60
    last = 0
    temp, code = None, None

    while True:
        now = time.monotonic()
        if (now - last) > REFRESH_S or temp is None:
            t, c = fetch_weather(req, lat, lon)
            if t is not None:
                temp, code = t, int(c) if c is not None else 1
                print("Météo:", temp, "°C, code", code)
                last = now
            else:
                print("Réessai météo dans 30 s…")
                time.sleep(30)
                continue

        # 1) Afficher la température (ex. “1 5 C” pour 15°C)
        show_temperature(temp)

        # 2) Afficher l’icône météo couleur
        show_icon_by_code(code)

        # respiration courte
        clear(); time.sleep(0.6)

try:
    main()
except KeyboardInterrupt:
    clear()
    raise
